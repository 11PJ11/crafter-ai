{
  "command": "/cai:refactor",
  "category": "Quality & Enhancement",
  "purpose": "Systematic code refactoring from Level 1-6 or complex Mikado Method",
  "synopsis": "/cai:refactor [target] [level] [options]",
  "description": "Comprehensive refactoring command supporting progressive Level 1-6 refactoring and complex architectural changes using the Mikado Method. Enables systematic code quality improvement through structured approaches ranging from basic readability improvements to advanced architectural pattern application.",
  "arguments": {
    "target": {
      "description": "File, class, or module to refactor",
      "required": false,
      "type": "string",
      "examples": ["user-service", "UserService.ts", "@src/modules/auth/"]
    },
    "level": {
      "description": "Refactoring level (1-6) or level range",
      "required": false,
      "type": "string",
      "values": ["1", "2", "3", "4", "5", "6", "1-3", "1-6", "5-6"]
    }
  },
  "flags": {
    "--level": {
      "description": "Specify refactoring level (1-6)",
      "type": "string",
      "values": ["1", "2", "3", "4", "5", "6", "1-3", "1-6", "5-6"],
      "details": {
        "1": "Readability (comments, naming, dead code)",
        "2": "Complexity (method extraction, duplication)",
        "3": "Responsibilities (class breakdown, coupling)",
        "4": "Abstractions (parameter objects, value objects)",
        "5": "Patterns (Strategy, State, Command patterns)",
        "6": "SOLID (advanced architectural principles)"
      }
    },
    "--scope": {
      "description": "Refactoring scope level",
      "type": "string",
      "values": ["file", "module", "project", "system"]
    },
    "--mikado": {
      "description": "Use Mikado Method for complex architectural changes",
      "type": "boolean",
      "details": "Applies systematic dependency tree construction for complex refactoring with baby steps protocol"
    },
    "--parallel-change": {
      "description": "Apply parallel change pattern for breaking changes",
      "type": "boolean",
      "details": "Uses Expand-Migrate-Contract pattern to minimize disruption during breaking changes"
    },
    "--tree": {
      "description": "Generate and display Mikado dependency tree",
      "type": "boolean",
      "details": "Visualizes refactoring dependencies and prerequisite relationships"
    },
    "--baby-steps": {
      "description": "Use baby steps protocol for safety",
      "type": "boolean",
      "details": "Enforces small, incremental changes with continuous validation"
    },
    "--validate": {
      "description": "Add comprehensive validation steps",
      "type": "boolean",
      "details": "Validates code quality improvement and test effectiveness"
    },
    "--test-first": {
      "description": "Ensure tests pass before refactoring",
      "type": "boolean",
      "details": "Validates comprehensive test coverage before beginning refactoring"
    },
    "--rollback": {
      "description": "Create rollback points",
      "type": "boolean",
      "details": "Creates git commits at each major refactoring milestone"
    },
    "--dry-run": {
      "description": "Show planned changes without execution",
      "type": "boolean",
      "details": "Analyzes code and shows planned refactoring actions without implementation"
    }
  },
  "levels": {
    "1": {
      "name": "Foundation Refactoring (Readability)",
      "focus": "Eliminate clutter, improve naming, remove dead code",
      "techniques": [
        "Remove obsolete and how-comments",
        "Extract constants for magic strings/numbers",
        "Apply domain-driven naming",
        "Remove dead code and unused imports",
        "Optimize variable scope"
      ]
    },
    "2": {
      "name": "Complexity Reduction (Simplification)",
      "focus": "Reduce complexity through extraction and elimination",
      "techniques": [
        "Extract Method (long methods)",
        "Eliminate duplicated code",
        "Decompose complex conditionals",
        "Apply Compose Method pattern"
      ]
    },
    "3": {
      "name": "Responsibility Organization",
      "focus": "Proper responsibility distribution",
      "techniques": [
        "Extract Class (large classes)",
        "Move Method (feature envy)",
        "Reduce inappropriate intimacy",
        "Apply Single Responsibility Principle"
      ]
    },
    "4": {
      "name": "Abstraction Refinement",
      "focus": "Create appropriate abstractions",
      "techniques": [
        "Introduce Parameter Object",
        "Replace Data Clumps with objects",
        "Replace Primitive Obsession",
        "Remove Middle Man antipattern"
      ]
    },
    "5": {
      "name": "Pattern Application",
      "focus": "Strategic design pattern application",
      "techniques": [
        "Replace Switch Statements with Strategy",
        "Apply State Pattern for state-dependent behavior",
        "Use Command Pattern for operations",
        "Apply Factory patterns for creation"
      ]
    },
    "6": {
      "name": "SOLID++ Principles",
      "focus": "Advanced architectural principles",
      "techniques": [
        "Single Responsibility Principle",
        "Open/Closed Principle",
        "Liskov Substitution Principle",
        "Interface Segregation Principle",
        "Dependency Inversion Principle"
      ]
    }
  },
  "examples": [
    {
      "command": "/cai:refactor user-service --level 2 --validate",
      "description": "Basic code cleanup with complexity reduction",
      "context": "When you need to clean up a specific service class"
    },
    {
      "command": "/cai:refactor authentication-system --mikado --parallel-change",
      "description": "Complex architectural refactoring using Mikado Method",
      "context": "When making breaking changes to core architecture"
    },
    {
      "command": "/cai:refactor core-domain --level 1-4 --validate --test-first",
      "description": "Progressive multi-level refactoring with safety",
      "context": "When systematically improving domain logic quality"
    },
    {
      "command": "/cai:refactor @src/ --level 5 --pattern strategy --wave-mode auto",
      "description": "System-wide pattern application",
      "context": "When applying design patterns across entire codebase"
    },
    {
      "command": "/cai:refactor legacy-module --mikado --baby-steps --rollback",
      "description": "Safe complex refactoring with incremental steps",
      "context": "When dealing with high-risk legacy code changes"
    },
    {
      "command": "/cai:refactor critical-payment-logic --validate --test-first --rollback --baby-steps --dry-run",
      "description": "Maximum safety refactoring with all validation",
      "context": "When refactoring business-critical code that cannot fail"
    }
  ],
  "sections": {
    "mikado_method": {
      "when_to_use": [
        "Level 4-6 refactoring requiring architectural changes",
        "Multiple class modifications with complex dependencies",
        "Breaking changes requiring careful coordination",
        "High-risk refactoring with significant impact"
      ],
      "process": [
        "Goal Definition: Define refactoring objective",
        "Tree Construction: Build dependency tree",
        "Baby Steps Execution: Small, safe changes",
        "Parallel Change Pattern: Manage breaking changes",
        "Validation: Continuous testing and verification"
      ]
    },
    "quality_gates": {
      "pre_refactoring": [
        "Test Coverage: â‰¥80% coverage for refactoring target",
        "Baseline Metrics: Code quality and complexity measurements",
        "Safety Net: Comprehensive test suite validation",
        "Backup Creation: Version control state preservation"
      ],
      "during_refactoring": [
        "Continuous Testing: Tests remain green throughout",
        "Small Steps: Incremental changes with frequent validation",
        "Pattern Application: Consistent application of refactoring techniques",
        "Quality Monitoring: Real-time quality metric tracking"
      ],
      "post_refactoring": [
        "Quality Improvement: Measurable improvement in code metrics",
        "Functionality Preservation: All tests passing",
        "Performance Validation: No performance regression",
        "Documentation Update: Updated code and architectural documentation"
      ]
    },
    "wave_integration": {
      "eligibility": "Complex refactoring across multiple components",
      "triggers": "Level 4-6 refactoring + multiple files + architectural impact",
      "orchestration": [
        "Analysis Wave: Code smell detection and categorization",
        "Planning Wave: Refactoring strategy and level selection",
        "Preparation Wave: Test setup and safety measures",
        "Execution Wave: Systematic refactoring implementation",
        "Validation Wave: Quality verification and impact assessment"
      ]
    }
  },
  "see_also": ["validate", "complete", "brownfield", "develop"]
}