{
  "permissions": {
    "allow": [
      "WebSearch",
      "WebFetch(domain:github.com)",
      "Bash(git init:*)",
      "Bash(git push:*)",
      "Bash(git add:*)",
      "Bash(git commit:*)",
      "Bash(find:*)",
      "Bash(for file in requirements-analysis/*.md)",
      "Bash(do wc:*)",
      "Bash(done)",
      "Bash(for file in test-design/*.md)",
      "Bash(for file in development/*.md)",
      "Bash(for file in quality-validation/*.md)",
      "Bash(for file in refactoring/*.md)",
      "Bash(for:*)",
      "Read(//c/Users/alexd/.claude/**)",
      "Bash(do mv \"$dir\" cai/)",
      "Bash(chmod:*)",
      "Bash(powershell.exe:*)",
      "Bash(grep:*)",
      "Bash(where sc)",
      "Bash(sc:*)",
      "Bash(if [ -d \"$HOME/.claude\" ])",
      "Bash(else echo \"No .claude directory found\")",
      "Bash(fi)",
      "Bash(dir \"C:\\Repositories\\Projects\\executive-flash-news\")",
      "Read(//c/Repositories/Projects/executive-flash-news/**)",
      "Bash(dir:*)",
      "Read(//c/Repositories/Projects/**)",
      "Bash(bash:*)",
      "Bash(./uninstall-ai-craft.sh:*)",
      "Bash(./install-ai-craft.sh:*)",
      "Bash(cat:*)",
      "Bash(ls:*)",
      "Bash(head:*)",
      "Bash(while read file)",
      "WebFetch(domain:docs.claude.com)",
      "WebFetch(domain:www.builder.io)",
      "Read(//mnt/c/Users/alexd/.claude/**)",
      "Bash(CAI_WORKFLOW_ACTIVE=true CLAUDE_READ_FILE=\"docs/craft-ai/invalid-file.md\" ./.claude/hooks/workflow/input-validator.sh)",
      "Bash(echo \"Exit code: $?\")",
      "Bash(CAI_WORKFLOW_ACTIVE=true CLAUDE_WRITE_FILE=\"docs/craft-ai/requirements.md\" ./.claude/hooks/workflow/stage-transition.sh)",
      "Bash(CAI_WORKFLOW_ACTIVE=true CLAUDE_WRITE_FILE=\"docs/craft-ai/architecture.md\" ./.claude/hooks/workflow/stage-transition-v2.sh)",
      "Bash(./.claude/hooks/workflow/state-initializer-v2.sh:*)",
      "Bash(./workflow/state-initializer.sh:*)",
      "Bash(echo:*)",
      "Bash(source:*)",
      "Bash(init_hook_system)",
      "Bash(git config:*)",
      "Read(//home/alexd/.claude/**)",
      "Read(//home/alexd/**)",
      "Read(//tmp/**)",
      "Bash(do if [ -f \"/home/alexd/.claude/hooks/$path\" ])",
      "Bash(then echo \"✅ $path\")",
      "Bash(else echo \"❌ $path MISSING\")",
      "Bash(./dev-tools/verify-installation.sh:*)",
      "Bash(/home/alexd/.claude/hooks/workflow/state-initializer.sh:*)",
      "Bash(CAI_WORKFLOW_ACTIVE=true CLAUDE_WRITE_FILE=\"docs/craft-ai/invalid-file.md\" /home/alexd/.claude/hooks/workflow/output-monitor.py)",
      "Bash(env:*)",
      "Bash(./tests/hooks/HookResilienceSystemE2E.sh)",
      "Bash(/mnt/c/Repositories/Projects/ai-craft/.claude/hooks/lib/resilience/ResilientHookManager.sh health)",
      "Read(///**)",
      "Bash(./tests/hooks/HookResilienceSystemE2E.sh:*)",
      "Bash(./dev-tools/test_modular_system.sh:*)",
      "Bash(./.claude/hooks/lib/resilience/CircuitBreaker.sh status:*)",
      "Bash(./dev-tools/ci-cd-integration.sh:*)",
      "Bash(gh run list:*)",
      "Bash(gh run view:*)",
      "Bash(/mnt/c/Users/alexd/.claude/hooks/lib/resilience/CircuitBreaker.sh status:*)",
      "Bash(./dev-tools/verify-installation.sh:*)",
      "Bash(tree:*)",
      "Bash(/mnt/c/Users/alexd/.claude/hooks/code-quality/lint-format.sh:*)",
      "Bash(pip3 install:*)",
      "Bash(do if find /mnt/c/Users/alexd/.claude/hooks -name \"$file\")",
      "Bash(then echo \"❌ FOUND: $file (should not be here)\")",
      "Bash(else echo \"✅ VERIFIED: $file not in target installation\")",
      "Bash(clang-format:*)",
      "Bash(format_csharp_files:*)",
      "Bash(detect_primary_language:*)",
      "Bash(get_detected_languages .)",
      "Bash(dispatch_formatter:*)",
      "Bash(is_language_supported csharp)",
      "Bash(validate_formatter_setup)",
      "Bash(detect_project_languages:*)",
      "Bash(get_supported_languages)",
      "WebFetch(domain:refactoring.guru)",
      "Read(//mnt/c/Repositories/alcor-academy/**)",
      "WebFetch(domain:refactoring.com)",
      "WebFetch(domain:python.plainenglish.io)",
      "WebFetch(domain:buildmode.dev)",
      "WebFetch(domain:medium.com)",
      "Read(//mnt/c/Repositories/Projects/dist/ide/commands/dw/**)",
      "Bash(./scripts/build-ide-bundle.sh:*)",
      "mcp__sequential-thinking__sequentialthinking",
      "Bash(python3:*)"
    ],
    "deny": [],
    "ask": []
  },
  "enabledMcpjsonServers": [
    "sequential-thinking"
  ]
}
